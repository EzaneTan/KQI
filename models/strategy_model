import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

class StrategyPredictor:
    """
    A machine learning model to predict the best trading strategy based on market conditions.
    """

    def __init__(self):
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)

    def train(self, X: np.ndarray, y: np.ndarray) -> None:
        """
        Train the strategy predictor model.

        Args:
            X (np.ndarray): Features (e.g., market indicators, protocol data).
            y (np.ndarray): Labels (e.g., strategy names).
        """
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        self.model.fit(X_train, y_train)

        # Evaluate the model
        y_pred = self.model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        print(f"Model trained with accuracy: {accuracy:.2f}")

    def predict(self, X: np.ndarray) -> np.ndarray:
        """
        Predict the best strategy for given market conditions.

        Args:
            X (np.ndarray): Features (e.g., market indicators, protocol data).

        Returns:
            np.ndarray: Predicted strategies.
        """
        return self.model.predict(X)
